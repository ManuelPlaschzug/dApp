{"version":3,"sources":["components/Layout.tsx","components/Identicon.tsx","components/ConnectButton.tsx","App.tsx","index.tsx"],"names":["Layout","children","flexDirection","alignItems","justifyContent","h","bg","StyledIdenticon","styled","div","Identicon","ref","useRef","account","useEthers","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","slice","ConnectButton","activateBrowserWallet","etherBalance","useEtherBalance","display","background","borderRadius","py","px","color","fontSize","parseFloat","formatEther","toFixed","border","_hover","borderStyle","borderColor","backgroundColor","m","height","fontWeight","mr","length","onClick","App","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"qNAQe,SAASA,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,SAC/B,OACE,cAAC,IAAD,CACEC,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,EAAE,QACFC,GAAG,WALL,SAOGL,I,+FCXDM,EAAkBC,IAAOC,IAAV,qHAON,SAASC,IACtB,IAAMC,EAAMC,mBACJC,EAAYC,cAAZD,QASR,OAPAE,qBAAU,WACJF,GAAWF,EAAIK,UACjBL,EAAIK,QAAQC,UAAY,GACxBN,EAAIK,QAAQE,YAAYC,IAAS,GAAIC,SAASP,EAAQQ,MAAM,EAAG,IAAK,SAErE,CAACR,IAEG,cAACN,EAAD,CAAiBI,IAAKA,IChBhB,SAASW,IACtB,MAA2CR,cAAnCS,EAAR,EAAQA,sBAAuBV,EAA/B,EAA+BA,QACzBW,EAAeC,YAAgBZ,GAMrC,OAAOA,EACL,eAAC,IAAD,CACEa,QAAQ,OACRvB,WAAW,SACXwB,WAAW,WACXC,aAAa,KACbC,GAAG,IALL,UAOE,cAAC,IAAD,CAAKC,GAAG,IAAR,SACE,eAAC,IAAD,CAAMC,MAAM,QAAQC,SAAS,KAA7B,UACGR,GAAgBS,WAAWC,YAAYV,IAAeW,QAAQ,GADjE,YAIF,eAAC,IAAD,CACN7B,GAAG,WACH8B,OAAO,wBACPC,OAAQ,CACND,OAAQ,MACRE,YAAa,QACbC,YAAa,WACbC,gBAAiB,YAEnBZ,aAAa,KACba,EAAE,MACFX,GAAI,EACJY,OAAO,OAZD,UAcN,cAAC,IAAD,CAAMX,MAAM,QAAQC,SAAS,KAAKW,WAAW,SAASC,GAAG,IAAzD,SACG/B,GAAO,UACHA,EAAQQ,MAAM,EAAG,GADd,cACsBR,EAAQQ,MAClCR,EAAQgC,OAAS,EACjBhC,EAAQgC,WAKd,cAACnC,EAAD,UAII,cAAC,IAAD,CAAQoC,QA5CV,WACEvB,KA2CA,iCCnDW,SAASwB,IACtB,OACE,cAAC,IAAD,UACE,cAAC/C,EAAD,UACA,cAACsB,EAAD,Q,aCFN0B,IAASC,OACP,cAAC,IAAMC,WAAP,UAKE,cAACC,EAAA,EAAD,CAAcC,OAAQ,GAAtB,SACE,cAACL,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.c2a5937a.chunk.js","sourcesContent":["// Layout.tsx\nimport { ReactNode } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\n\ntype Props = {\n  children?: ReactNode;\n};\n\nexport default function Layout({ children }: Props) {\n  return (\n    <Flex\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      h=\"100vh\"\n      bg=\"gray.800\"\n    >\n      {children}\n    </Flex>\n  )\n}","// Identicon.tsx\nimport { useEffect, useRef } from \"react\";\nimport { useEthers } from \"@usedapp/core\";\nimport styled from \"@emotion/styled\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nconst StyledIdenticon = styled.div`\n  height: 1rem;\n  width: 1rem;\n  border-radius: 1.125rem;\n  background-color: black;\n`;\n\nexport default function Identicon() {\n  const ref = useRef<HTMLDivElement>();\n  const { account } = useEthers();\n\n  useEffect(() => {\n    if (account && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\n    }\n  }, [account]);\n  \n  return <StyledIdenticon ref={ref as any} />\n  \n}\n\n\n","// ConnectButton.tsx\nimport { Button, Box, Text } from \"@chakra-ui/react\";\nimport { useEthers, useEtherBalance } from \"@usedapp/core\";\nimport { formatEther } from \"@ethersproject/units\";\nimport Identicon from \"./Identicon\";\n\n\n\nexport default function ConnectButton() {\n  const { activateBrowserWallet, account } = useEthers();\n  const etherBalance = useEtherBalance(account);\n\n  function handleConnectWallet() {\n    activateBrowserWallet();\n  }\n\n  return account ? (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      background=\"gray.700\"\n      borderRadius=\"xl\"\n      py=\"0\"\n    >\n      <Box px=\"3\">\n        <Text color=\"white\" fontSize=\"md\">\n          {etherBalance && parseFloat(formatEther(etherBalance)).toFixed(3)} ETH\n        </Text>\n      </Box>\n      <Button\nbg=\"gray.800\"\nborder=\"1px solid transparent\"\n_hover={{\n  border: \"1px\",\n  borderStyle: \"solid\",\n  borderColor: \"blue.400\",\n  backgroundColor: \"gray.700\",\n}}\nborderRadius=\"xl\"\nm=\"1px\"\npx={3}\nheight=\"38px\"\n>\n<Text color=\"white\" fontSize=\"md\" fontWeight=\"medium\" mr=\"2\">\n  {account &&\n    `${account.slice(0, 6)}...${account.slice(\n      account.length - 4,\n      account.length\n    )}`}\n</Text>\n\n\n<Identicon />\n</Button>\n    </Box>\n  ) : (\n    <Button onClick={handleConnectWallet}>Connect to a wallet</Button>\n  );\n}\n\n\n","// App.tsx\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Layout from \"./components/Layout\";\nimport ConnectButton from \"./components/ConnectButton\";\n\nexport default function App() {\n  return (\n    <ChakraProvider>\n      <Layout>\n      <ConnectButton />\n      </Layout>\n    </ChakraProvider>\n  )\n}\n\n\n\n","// index.tsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\"\n// Import DAppProvider\nimport { DAppProvider } from \"@usedapp/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* \n       Wrap our app in the provider, config is required, \n        but can be left as an empty object: \n    */}\n    <DAppProvider config={{}}>\n      <App />\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}